services:

# MySQL Database Service
  mysqldb:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_DATABASE: 'quiniblockDB'    # Initial database name
      MYSQL_USER: 'fiveblocks'          # Non-root MySQL user
      MYSQL_PASSWORD: 'password.24!'          # Password for non-root user
      MYSQL_ROOT_PASSWORD: 'password.24!'     # Password for root user
    ports:
      - '33066:3306'                    # Port mapping for MySQL
    volumes:
      - my-db:/var/lib/mysql            # Persistent storage volume
      - ./backend/script/quiniblockDB.sql:/docker-entrypoint-initdb.d/quiniblockDB.sql  # Initialization SQL script
    expose:
      - '3306'                          # Expose internal MySQL port to other services
    networks:
      - app-network

# phpMyAdmin Service
  phpmyadmin:
     image: phpmyadmin/phpmyadmin
     restart: always
     environment:
       PMA_HOST: mysqldb                      # MySQL host for phpMyAdmin
       MYSQL_ROOT_PASSWORD: 'password.24!'     # Password for root user
     ports:
       - '8080:80'                       # Port mapping for phpMyAdmin
     depends_on:
       - mysqldb
     networks:
       - app-network


# Node.js Server Service
  backend:
    depends_on:
      - mysqldb   
      - phpmyadmin
    links:
      - mysqldb
    build:
      context: ./backend            # Path to the Node.js server Dockerfile
      dockerfile: Dockerfile   
    environment:
      DB_HOST:  mysqldb              # ip de phpmyadmin, MySQL no se por que no toma simplemente db
      DB_USER: fiveblocks               # MySQL username
      DB_PASSWORD: password.24!         # MySQL password
      DB_NAME: quiniblockDB             # Database name
      DB_PORT: 3306                 # es el puerto interno
    ports:
      - '5000:5000'                     # Port mapping for Node.js server
    networks:
      - app-network

# # React App Service
#   frontend:
#     build:
#       context: ./frontend           # Path to the React app Dockerfile
#       dockerfile: Dockerfile
#     ports:
#       - '3000:3000'                     # Port mapping for React app
#     depends_on:
#       - backend                     # Ensure Node server starts before React app
#     networks:
#       - app-network

# Networks Definition
networks:
  app-network:
    driver: bridge

# Volumes Definition
volumes:
  my-db:                                # Persistent volume for MySQL data
